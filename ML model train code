import os
import cv2
import numpy as np
import tensorflow as tf

# Path to the training directory
train_dir = r'C:\Users\sunay\OneDrive\Desktop\train' // give the link train folder link of the image dataset 

# Initialize lists to hold image data and labels
images = []
labels = []

# Loop through each file in the directory
for file_name in os.listdir(train_dir):
    file_path = os.path.join(train_dir, file_name)
    
    # Load the image using OpenCV
    img = cv2.imread(file_path)
    img = cv2.resize(img, (150, 150))  # Resize to match model input size
    
    # Convert the image from BGR to RGB (OpenCV loads images in BGR format)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    
    # Append the image to the list of images
    images.append(img)
    
    # Determine the label based on the file name
    if 'Crack' in file_name:
        labels.append(1)  # Label 1 for crack
    else:
        labels.append(0)  # Label 0 for no crack

# Convert lists to numpy arrays
images = np.array(images) / 255.0  # Normalize pixel values to [0, 1]
labels = np.array(labels)

# Shuffle the dataset
indices = np.arange(images.shape[0])
np.random.shuffle(indices)
images = images[indices]
labels = labels[indices]

# Split the data into training and validation sets
split_idx = int(0.8 * len(images))
x_train, x_val = images[:split_idx], images[split_idx:]
y_train, y_val = labels[:split_idx], labels[split_idx:]

# Convert labels to categorical if you plan to use a softmax layer
# y_train = tf.keras.utils.to_categorical(y_train, num_classes=2)
# y_val = tf.keras.utils.to_categorical(y_val, num_classes=2)

# Example of using these arrays with a model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=150, validation_data=(x_val, y_val))
# Save the model in HDF5 format
model.save('railway_crack_model.keras')

